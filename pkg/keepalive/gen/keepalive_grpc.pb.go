// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.17.3
// source: pkg/keepalive/proto/keepalive.proto

package gen

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// KeepaliveClient is the client API for Keepalive service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type KeepaliveClient interface {
	Keepalive(ctx context.Context, in *KeepaliveRequest, opts ...grpc.CallOption) (*KeepaliveResponse, error)
}

type keepaliveClient struct {
	cc grpc.ClientConnInterface
}

func NewKeepaliveClient(cc grpc.ClientConnInterface) KeepaliveClient {
	return &keepaliveClient{cc}
}

func (c *keepaliveClient) Keepalive(ctx context.Context, in *KeepaliveRequest, opts ...grpc.CallOption) (*KeepaliveResponse, error) {
	out := new(KeepaliveResponse)
	err := c.cc.Invoke(ctx, "/hashicorp.keepalive.Keepalive/Keepalive", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// KeepaliveServer is the server API for Keepalive service.
// All implementations must embed UnimplementedKeepaliveServer
// for forward compatibility
type KeepaliveServer interface {
	Keepalive(context.Context, *KeepaliveRequest) (*KeepaliveResponse, error)
	mustEmbedUnimplementedKeepaliveServer()
}

// UnimplementedKeepaliveServer must be embedded to have forward compatible implementations.
type UnimplementedKeepaliveServer struct {
}

func (UnimplementedKeepaliveServer) Keepalive(context.Context, *KeepaliveRequest) (*KeepaliveResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Keepalive not implemented")
}
func (UnimplementedKeepaliveServer) mustEmbedUnimplementedKeepaliveServer() {}

// UnsafeKeepaliveServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to KeepaliveServer will
// result in compilation errors.
type UnsafeKeepaliveServer interface {
	mustEmbedUnimplementedKeepaliveServer()
}

func RegisterKeepaliveServer(s grpc.ServiceRegistrar, srv KeepaliveServer) {
	s.RegisterService(&Keepalive_ServiceDesc, srv)
}

func _Keepalive_Keepalive_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KeepaliveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeepaliveServer).Keepalive(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hashicorp.keepalive.Keepalive/Keepalive",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeepaliveServer).Keepalive(ctx, req.(*KeepaliveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Keepalive_ServiceDesc is the grpc.ServiceDesc for Keepalive service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Keepalive_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "hashicorp.keepalive.Keepalive",
	HandlerType: (*KeepaliveServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Keepalive",
			Handler:    _Keepalive_Keepalive_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/keepalive/proto/keepalive.proto",
}
